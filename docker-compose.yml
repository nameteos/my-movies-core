services:
  postgres:
    image: postgres:16-alpine
    container_name: my-movies-go-postgres
    env_file: .env
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-movieapp}"]
      interval: 5s
      timeout: 5s
      retries: 5

  mongodb:
    image: mongo:7-jammy
    container_name: my-movies-go-mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 5s
      retries: 5

  kafka:
    image: bitnami/kafka:latest
    container_name: my-movies-go-kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      - ALLOW_PLAINTEXT_LISTENER=yes
      # KRaft mode configuration
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      # Listeners configuration
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9092
      - KAFKA_CFG_LISTENERS=PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093,PLAINTEXT_HOST://0.0.0.0:29092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      # Topic auto-creation (explicitly enable it)
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    volumes:
      - kafka_data:/bitnami
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server kafka:9092 --list"]
      interval: 10s
      timeout: 10s
      retries: 5
      
  kafka-init:
    image: confluentinc/cp-kafka:7.4.0
    container_name: my-movies-go-kafka-init
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - ./scripts/kafka-init.sh:/scripts/kafka-init.sh
    command: ["sh", "/scripts/kafka-init.sh"]
    restart: on-failure

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: my-movies-go-app
    volumes:
      - .:/app
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_healthy
    env_file: .env
    environment:
      POSTGRES_HOST: postgres
      MONGODB_URI: mongodb://mongodb:27017
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    ports:
      - "8080:8080"

volumes:
  postgres_data:
  mongodb_data:
  kafka_data: